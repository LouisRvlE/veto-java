package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/veterinarian") // This means URL's start with /api (after Application path)
public class VeterinarianController {
	@Autowired // This means to get the bean called animalRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private VeterinarianRepository veterinarianRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewVeterinarian(
			@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Veterinarian newVeterinarian = new Veterinarian(name);

		veterinarianRepository.save(newVeterinarian);
		return "Saved";
	}

	@GetMapping(path = "/{veterinarianId}")
	public @ResponseBody Veterinarian getVeterinarian(@PathVariable("veterinarianId") long veterinarianId) {
		return veterinarianRepository.findById(veterinarianId).get();
	}

	@DeleteMapping(path = "/{veterinarianId}/delete")
	public @ResponseBody String deleteVeterinarian(@PathVariable("veterinarianId") long veterianId) {
		veterinarianRepository.deleteById(veterianId);
		return "Deleted";
	}

	@PostMapping(path = "/{veterinarianId}/update") // Map ONLY POST Requests
	public @ResponseBody String updateVeterinarian(
			@PathVariable("veterinarianId") long veterinarianId,
			@RequestParam String name) {

		Veterinarian veterinarian = veterinarianRepository.findById(veterinarianId).get();
		veterinarian.setName(name);

		veterinarianRepository.save(veterinarian);
		return "Updated";
	}

	@GetMapping(path = "")
	public @ResponseBody Iterable<Veterinarian> getAllVeterinarian() {
		// This returns a JSON or XML with the animal
		return veterinarianRepository.findAll();
	}
}
