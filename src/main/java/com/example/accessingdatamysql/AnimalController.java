package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/animal") // This means URL's start with /api (after Application path)
public class AnimalController {
	@Autowired // This means to get the bean called animalRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private AnimalRepository animalRepository;
	@Autowired
	private ClientRepository clientRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewAnimal(
			@RequestParam String name,
			@RequestParam String age,
			@RequestParam String sexe,
			@RequestParam Long client,
			@RequestParam String type,
			@RequestParam String note) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		// http://localhost:8080/api/add?name=Paul

		Client clientObj = clientRepository.findById(client).get();

		Animal newAnimal = new Animal(name, Integer.parseInt(age), sexe, clientObj, note, type);

		animalRepository.save(newAnimal);
		return "Saved";
	}

	@GetMapping(path = "/{animalId}")
	public @ResponseBody Animal getAnimal(@PathVariable("animalId") long animalId) {
		return animalRepository.findById(animalId).get();
	}

	@DeleteMapping(path = "/{animalId}/delete")
	public @ResponseBody String deleteAnimal(@PathVariable("animalId") long animalId) {
		animalRepository.deleteById(animalId);
		return "Deleted";
	}

	@PostMapping(path = "/{animalId}/update") // Map ONLY POST Requests
	public @ResponseBody String updateAnimal(
			@PathVariable("animalId") long animalId,
			@RequestParam(required = false) String name,
			@RequestParam(required = false) Number age,
			@RequestParam(required = false) String sexe,
			@RequestParam(required = false) Long client,
			@RequestParam(required = false) String type,
			@RequestParam(required = false) String note) {

		Animal animal = animalRepository.findById(animalId).get();
		if (name != null) {
			animal.setName(name);
		}

		if (age != null) {
			animal.setAge(age.intValue());
		}

		if (sexe != null) {
			animal.setSexe(sexe);
		}

		if (client != null) {
			Client clientObj = clientRepository.findById(client).get();
			animal.setClient(clientObj);
		}

		if (type != null) {
			animal.setType(type);
		}

		if (note != null) {
			animal.setNote(note);
		}

		animalRepository.save(animal);
		return "Updated";
	}

	@GetMapping(path = "/list")
	public @ResponseBody Iterable<Animal> getAllAnimal() {
		// This returns a JSON or XML with the animal
		return animalRepository.findAll();
	}
}
