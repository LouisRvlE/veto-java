package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/appointment") // This means URL's start with /api (after Application path)
public class AppointmentController {
    @Autowired // This means to get the bean called animalRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private AppointmentRepository appointmentRepository;
    @Autowired
    private AnimalRepository animalRepository;
    @Autowired
    private VeterinarianRepository veterinarianRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewAppointment(@RequestParam String date, @RequestParam Long animal,
            @RequestParam Long veterinarian) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Animal animalObj = animalRepository.findById(animal).get();
        Veterinarian veterinarianObj = veterinarianRepository.findById(veterinarian).get();

        Appointment newAppointment = new Appointment();
        newAppointment.setDate(date);
        newAppointment.setAnimal(animalObj);
        newAppointment.setVeterinarian(veterinarianObj);
        appointmentRepository.save(newAppointment);
        return "Saved";
    }

    @GetMapping(path = "")
    public @ResponseBody Iterable<Appointment> getAllAnimal() {
        // This returns a JSON or XML with the animal
        return appointmentRepository.findAll();
    }

    @DeleteMapping(path = "/{appointmentId}/delete")
    public @ResponseBody String deleteAppointment(@PathVariable("appointmentId") long appointmentId) {
        appointmentRepository.deleteById(appointmentId);
        return "Deleted";
    }

    @GetMapping(path = "/{appointmentId}")
    public @ResponseBody Appointment getAppointment(@PathVariable("appointmentId") long appointmentId) {
        return appointmentRepository.findById(appointmentId).get();
    }

    @PostMapping(path = "/{appointmentId}/update") // Map ONLY POST Requests
    public @ResponseBody String updateAppointment(@PathVariable("appointmentId") long appointmentId,
            @RequestParam(required = false) String date, @RequestParam(required = false) Long animal,
            @RequestParam(required = false) Long veterinarian) {

        Appointment appointment = appointmentRepository.findById(appointmentId).get();

        if (date != null) {
            appointment.setDate(date);
        }

        if (animal != null) {
            Animal animalObj = animalRepository.findById(animal).get();
            appointment.setAnimal(animalObj);
        }

        if (veterinarian != null) {
            Veterinarian veterinarianObj = veterinarianRepository.findById(veterinarian).get();
            appointment.setVeterinarian(veterinarianObj);
        }

        appointmentRepository.save(appointment);
        return "Updated";
    }
}
