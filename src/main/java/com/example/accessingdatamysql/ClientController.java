package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/client") // This means URL's start with /api (after Application path)
public class ClientController {
    @Autowired // This means to get the bean called animalRepository
               // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody String addNewClient(@RequestParam String name) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Client newClient = new Client();
        newClient.setName(name);
        clientRepository.save(newClient);
        return "Saved";
    }

    @GetMapping(path = "/list")
    public @ResponseBody Iterable<Client> getAllAnimal() {
        // This returns a JSON or XML with the animal
        return clientRepository.findAll();
    }

    @DeleteMapping(path = "/{clientId}/delete")
    public @ResponseBody String deleteClient(@PathVariable("clientId") long clientId) {
        // Client client = clientRepository.findById(clientId).get();
        clientRepository.deleteById(clientId);
        return "Deleted";
    }

    @GetMapping(path = "/{clientId}")
    public @ResponseBody Client getClient(@PathVariable("clientId") long clientId) {
        return clientRepository.findById(clientId).get();
    }

    @PostMapping(path = "/{clientId}/update") // Map ONLY POST Requests
    public @ResponseBody String updateClient(@RequestParam String name,
            @PathVariable("clientId") long clientId) {

        Client client = clientRepository.findById(clientId).get();

        client.setName(name);
        clientRepository.save(client);
        return "Updated";
    }
}
