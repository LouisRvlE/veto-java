package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api/report") // This means URL's start with /api (after Application path)
public class ReportController {
	@Autowired // This means to get the bean called animalRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private ReportRepository reportRepository;
	@Autowired
	private AppointmentRepository appointmentRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewAnimal(@RequestParam String name,
			@RequestParam String description, @RequestParam Long appointmentId) {
		Report newReport = new Report();
		newReport.setName(name);
		newReport.setDescription(description);

		Appointment appointment = appointmentRepository.findById(appointmentId).get();
		newReport.setAppointment(appointment);
		// appointment.setReport(newReport);
		// appointmentRepository.save(appointment);
		reportRepository.save(newReport);
		return "Saved";
	}

	@GetMapping(path = "/{reportId}")
	public @ResponseBody Report getReport(@PathVariable("reportId") long reportId) {
		return reportRepository.findById(reportId).get();
	}

	@DeleteMapping(path = "/{reportId}/delete")
	public @ResponseBody String deleteReport(@PathVariable("reportId") long reportId) {
		// Appointment appointment = reportRepository.findById(reportId).get();
		// appointment.clearReport();
		reportRepository.deleteById(reportId);
		return "Deleted";
	}

	@PostMapping(path = "/{reportId}/update") // Map ONLY POST Requests
	public @ResponseBody String updateReport(
			@PathVariable("reportId") long reportId,
			@RequestParam(required = false) String name,
			@RequestParam(required = false) String description) {

		Report report = reportRepository.findById(reportId).get();
		if (name != null) {
			report.setName(name);
		}
		if (name != null) {
			report.setDescription(description);
		}

		reportRepository.save(report);
		return "Updated";
	}

	@GetMapping(path = "")
	public @ResponseBody Iterable<Report> getAllreport() {
		// This returns a JSON or XML with the report
		return reportRepository.findAll();
	}
}
